name: MLOps Model Retraining Pipeline

on:
  repository_dispatch:
    types: [retrain_model]
  workflow_dispatch: # Allow manual triggers too
  schedule:
    - cron: '0 0 * * 1' # Weekly retraining

env:
  AWS_REGION: eu-west-2
  MODEL_BUCKET: historical-sagemaker-bucket-talha
  PYTHON_VERSION: '3.12'
  ENVIRONMENT: 'development'

jobs: 
  quality_checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 
        uses: actions/setup-python@v4 
        with: 
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install quality tools 
        run: |
          python -m pip install --upgrade pip 
          pip install pylint black pytest bandit safety mypy pytest-cov

      - name: Code formatting check 
        run: black --check training/ 

      - name: Type checking 
        run: mypy training/ 

      - name: Lint check 
        run: pylint training/ 
        
      - name: Security scan
        run: |
          bandit -r training/
          safety checking
      
      - name: Run tests with coverage 
        run: |
          pytest --cov=training --cov-report=xml 

      - name: Upload coverage report 
        uses: actions/upload-artifact@v3 
        with: 
          name: coverage-report 
          path: coverage.xml 

  retrain: 
    needs: quality_checks
    runs-on: ubuntu-latest
    permissions: 
      id-token: write 
      contents: read 
    steps: 
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::463470963000:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get SageMaker Role ARN
        run: |
          SAGEMAKER ROLE_ARN=$(aws secretsmanager get-secrets-value \
            -- secret-id sagemaker-role-arn \
            --query 'SecretString' \
            --output text)
          echo "SAGEMAKER_ROLE_ARN=$SAGEMAKER_ROLE_ARN" >> $GITHUB_ENV

      - name: Set up Python 
        uses: actions/setup-python@v4 
        with: 
          python-version: ${{env.PYTHON_VERSION}}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r requirements.txt 

      - name: Pre-deployment Health Check 
        id: health_check
        run: python training/health_check.py --pre-deployment 
        env: 
          ENVIRONMENT: ${{ env.ENVIRONMENT }}

      - name: Trigger Training 
        id: training
        if: steps.health_check.outcome == 'success'
        run: python training/trigger_training.py 
        env: 
          SAGEMAKER_ROLE_ARN: $${{ env.SAGEMAKER_ROLE_ARN }}
          MODEL_BUCKET: ${{ env.MODEL_BUCKET }}
      
      - name: Monitor Training
        run: python training/monitor_training.py
        env: 
          TRAINING_JOB_NAME: ${{ steps.training.outputs.job_name }}

      - name: Gradual Rollout 
        id: rollout 
        run: |
          python training/rollout.py --percentage 20 
          sleep 300
          python training/health_check.py --during-rollout
          python training/rollout.py --percentage 100 

      - name: Rollback on Failure 
        if: failure()
        run: python training/rollback.py

      - name: Update metrics 
        if: always()
        uses: actions/github-script@v6 
        with: 
          script: |
            const message = `## Model Retraining Status: ${context.job.status}
            - Environment: ${{ env.ENVIRONMENT }}
            - Model Version: ${{ steps.training.outputs.model_name }}
            - Deployment Status: ${{ steps.rollout.outcome }}
            - Validation Status: ${{ steps.validation.outcome }}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
              body: message
            });